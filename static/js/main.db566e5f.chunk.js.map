{"version":3,"sources":["components/Busho.js","components/Tanto.js","components/Baibai.js","components/Azukari.js","components/Henpin.js","components/Shoribi.js","components/Hasseibi.js","components/Furikaebi.js","components/Nissu.js","components/TokunoOption.js","components/Haitanto.js","components/Shukkobi.js","components/Meihenbi.js","components/Tokuno.js","components/Zeiku.js","components/SubmitButton.js","components/Meisai.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","margin","minWidth","GET_BUSHO","gql","CHANGE_BUSHO","Busho","classes","useMutation","changeSelectedBusho","useQuery","loading","error","data","selectedValue","selectedBusho","datas","busho","FormControl","className","InputLabel","id","Select","labelId","value","onChange","e","variables","target","doChangeSelect","MenuItem","key","map","repo","name","GET_TANTO","CHANGE_TANTO","Tanto","changeSelectedTanto","selectedTanto","tanto","GET_BAIBAI","CHANGE_BAIBAI","Baibai","changeSelectedBaibai","selectedBaibai","baibai","FormLabel","component","RadioGroup","row","aria-label","FormControlLabel","control","Radio","label","GET_AZUKARI","CHANGE_AZUKARI","Azukari","changeSelectedAzukari","selectedAzukari","azukari","GET_HENPIN","CHANGE_HENPIN","Henpin","changeSelectedHenpin","selectedHenpin","henpin","CHANGE_SHORIBI","GET_SHORIBI","Shoribi","changeSelectedShoribi","selectedShoribi","utils","DateFnsUtils","format","locale","ja","date","myDate","toString","KeyboardButtonProps","CHANGE_HASSEIBI","GET_HASSEIBI","Hasseibi","changeSelectedHasseibi","selectedHasseibi","CHANGE_FURIKAEBI","GET_FURIKAEBI","Furikaebi","changeSelectedFurikaebi","selectedFurikaebi","GET_NISSU","CHANGE_NISSU","Nissu","changeSelectedNissu","selectedNissu","TextField","type","doChangeTextField","InputLabelProps","shrink","GET_TOKUNO_OPTION","CHANGE_TOKUNO_OPTION","TokunoOption","changeSelectedTokunoOption","selectedTokunoOption","tokuno_option","GET_HAITANTO","CHANGE_HAITANTO","Haitanto","changeSelectedHaitanto","selectedHaitanto","haitanto","CHANGE_SHUKKOBI","GET_SHUKKOBI","Shukkobi","changeSelectedShukkobi","selectedShukkobi","CHANGE_MEIHENBI","GET_MEIHENBI","Meihenbi","changeSelectedMeihenbi","selectedMeihenbi","GET_TOKUNO","CHANGE_TOKUNO","Tokuno","changeSelectedTokuno","selectedTokuno","tokuno","GET_ZEIKU","CHANGE_ZEIKU","Zeiku","changeSelectedZeiku","selectedZeiku","zeiku","GET_LOCAL_STATE","SubmitButton","Button","variant","color","onClick","msg","alert","doClickButton","GET_MEISAI","Meisai","meisai","columns","options","sort","filter","App","cache","InMemoryCache","httpLink","HttpLink","uri","client","ApolloClient","link","resolvers","Mutation","_root","writeQuery","query","console","log","theme","createMuiTheme","palette","primary","main","blue","CssBaseline","Grid","container","spacing","item","xs","Typography","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.db566e5f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// Material-UI関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n// データ取得クエリ\r\nconst GET_BUSHO = gql`\r\n    query getData($id: String) {\r\n        selectedBusho @client\r\n        busho(id: $id) {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_BUSHO = gql`\r\n    mutation changeSelectedBusho($id: String!) {\r\n        changeSelectedBusho(id: $id) @client\r\n    }\r\n`\r\n\r\nexport default function Busho() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // コンボボックス変更時\r\n    const doChangeSelect = (e) => {\r\n        changeSelectedBusho({\r\n            variables: {\r\n                'id': e.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedBusho] = useMutation(CHANGE_BUSHO)\r\n\r\n    // ローカルステート＆データ全件取得\r\n    const { loading, error, data } = useQuery(GET_BUSHO)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedBusho\r\n    const datas = data.busho\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <InputLabel id=\"my-label\">部署</InputLabel>\r\n            <Select\r\n                labelId=\"my-label\"\r\n                id=\"my-select\"\r\n                value={selectedValue}\r\n                onChange={e => doChangeSelect(e)}\r\n            >\r\n            <MenuItem key=\"\" value=\"\">未選択</MenuItem>\r\n            {datas.map(repo => (\r\n                <MenuItem key={repo.id} value={repo.id}>{repo.id} - {repo.name}</MenuItem>\r\n            ))}\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n// データ取得クエリ\r\nconst GET_TANTO = gql`\r\n    query getData($id: String) {\r\n        selectedTanto @client\r\n        tanto(id: $id) {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_TANTO = gql`\r\n    mutation changeSelectedTanto($id: String!) {\r\n        changeSelectedTanto(id: $id) @client\r\n    }\r\n`\r\n\r\nexport default function Tanto() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // コンボボックス変更時\r\n    const doChangeSelect = (e) => {\r\n        changeSelectedTanto({\r\n            variables: {\r\n                'id': e.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedTanto] = useMutation(CHANGE_TANTO)\r\n\r\n    // ローカルステート＆データ全件取得\r\n    const { loading, error, data } = useQuery(GET_TANTO)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedTanto\r\n    const datas = data.tanto\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <InputLabel id=\"my-label\">担当</InputLabel>\r\n            <Select\r\n                labelId=\"my-label\"\r\n                id=\"my-select\"\r\n                value={selectedValue}\r\n                onChange={e => doChangeSelect(e)}\r\n            >\r\n            <MenuItem key=\"\" value=\"\">未選択</MenuItem>\r\n            {datas.map(repo => (\r\n                <MenuItem key={repo.id} value={repo.id}>{repo.id} - {repo.name}</MenuItem>\r\n            ))}\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {\r\n    FormControl,\r\n    FormLabel,\r\n    RadioGroup,\r\n    Radio,\r\n    FormControlLabel,\r\n} from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n// データ取得クエリ\r\nconst GET_BAIBAI = gql`\r\n    query getData($id: String) {\r\n        selectedBaibai @client\r\n        baibai(id: $id) {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_BAIBAI = gql`\r\n    mutation changeSelectedBaibai($id: String!) {\r\n        changeSelectedBaibai(id: $id) @client\r\n    }\r\n`\r\n\r\nexport default function Baibai() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // ラジオボタン変更時\r\n    const doChangeRadio = (e) => {\r\n        changeSelectedBaibai({\r\n            variables: {\r\n                'id': e.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedBaibai] = useMutation(CHANGE_BAIBAI)\r\n\r\n    // ローカルステート＆データ全件取得\r\n    const { loading, error, data } = useQuery(GET_BAIBAI)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedBaibai\r\n    const datas = data.baibai\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <FormLabel component=\"legend\">売買区分</FormLabel>\r\n            <RadioGroup row aria-label=\"gender\" value={selectedValue} onChange={doChangeRadio}>\r\n            {datas.map(repo => (\r\n                <FormControlLabel key={repo.id} value={repo.id} control={<Radio />} label={repo.name} />\r\n            ))}\r\n            </RadioGroup>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {\r\n    FormControl,\r\n    FormLabel,\r\n    RadioGroup,\r\n    Radio,\r\n    FormControlLabel,\r\n} from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n// データ取得クエリ\r\nconst GET_AZUKARI = gql`\r\n    query getData($id: String) {\r\n        selectedAzukari @client\r\n        azukari(id: $id) {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_AZUKARI = gql`\r\n    mutation changeSelectedAzukari($id: String!) {\r\n        changeSelectedAzukari(id: $id) @client\r\n    }\r\n`\r\n\r\nexport default function Azukari() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // ラジオボタン変更時\r\n    const doChangeRadio = (e) => {\r\n        changeSelectedAzukari({\r\n            variables: {\r\n                'id': e.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedAzukari] = useMutation(CHANGE_AZUKARI)\r\n\r\n    // ローカルステート＆データ全件取得\r\n    const { loading, error, data } = useQuery(GET_AZUKARI)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedAzukari\r\n    const datas = data.azukari\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <FormLabel component=\"legend\">預り区分</FormLabel>\r\n            <RadioGroup row aria-label=\"gender\" value={selectedValue} onChange={doChangeRadio}>\r\n            {datas.map(repo => (\r\n                <FormControlLabel key={repo.id} value={repo.id} control={<Radio />} label={repo.name} />\r\n            ))}\r\n            </RadioGroup>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {\r\n    FormControl,\r\n    FormLabel,\r\n    RadioGroup,\r\n    Radio,\r\n    FormControlLabel,\r\n} from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n// データ取得クエリ\r\nconst GET_HENPIN = gql`\r\n    query getData($id: String) {\r\n        selectedHenpin @client\r\n        henpin(id: $id) {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_HENPIN = gql`\r\n    mutation changeSelectedHenpin($id: String!) {\r\n        changeSelectedHenpin(id: $id) @client\r\n    }\r\n`\r\n\r\nexport default function Henpin() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // ラジオボタン変更時\r\n    const doChangeRadio = (e) => {\r\n        changeSelectedHenpin({\r\n            variables: {\r\n                'id': e.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedHenpin] = useMutation(CHANGE_HENPIN)\r\n\r\n    // ローカルステート＆データ全件取得\r\n    const { loading, error, data } = useQuery(GET_HENPIN)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedHenpin\r\n    const datas = data.henpin\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <FormLabel component=\"legend\">返品区分</FormLabel>\r\n            <RadioGroup row aria-label=\"gender\" value={selectedValue} onChange={doChangeRadio}>\r\n            {datas.map(repo => (\r\n                <FormControlLabel key={repo.id} value={repo.id} control={<Radio />} label={repo.name} />\r\n            ))}\r\n            </RadioGroup>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI＆日付関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport ja from 'date-fns/locale/ja'\r\nimport format from 'date-fns/format'\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { FormControl } from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_SHORIBI = gql`\r\n    mutation changeSelectedShoribi($date: String!) {\r\n        changeSelectedShoribi(date: $date) @client\r\n    }\r\n`\r\n\r\n// データ取得クエリ\r\nconst GET_SHORIBI = gql`\r\n    query {\r\n        selectedShoribi @client\r\n    }\r\n`\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n\r\nexport default function Shoribi() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // DateTimePicker変更時\r\n    const doChangeDateTimePicker = date => {\r\n        let myDate = null\r\n        if (date !== null) {\r\n            if (date.toString() !== \"Invalid Date\") {\r\n                myDate = format(date, 'yyyy-MM-dd')\r\n            }\r\n        }\r\n        changeSelectedShoribi({\r\n            variables: {\r\n                'date': myDate\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedShoribi] = useMutation(CHANGE_SHORIBI)\r\n\r\n    // ローカルステート取得\r\n    const { loading, error, data } = useQuery(GET_SHORIBI)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedShoribi\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                    margin=\"normal\"\r\n                    id=\"shoribi-date-picker-dialog\"\r\n                    label=\"処理日\"\r\n                    format=\"yyyy-MM-dd\"\r\n                    locale={ja} \r\n                    value={selectedValue}\r\n                    onChange={doChangeDateTimePicker}\r\n                    KeyboardButtonProps={{\r\n                        'aria-label': 'change date',\r\n                    }}\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI＆日付関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport ja from 'date-fns/locale/ja'\r\nimport format from 'date-fns/format'\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { FormControl } from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_HASSEIBI = gql`\r\n    mutation changeSelectedHasseibi($date: String!) {\r\n        changeSelectedHasseibi(date: $date) @client\r\n    }\r\n`\r\n\r\n// データ取得クエリ\r\nconst GET_HASSEIBI = gql`\r\n    query {\r\n        selectedHasseibi @client\r\n    }\r\n`\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n\r\nexport default function Hasseibi() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // DateTimePicker変更時\r\n    const doChangeDateTimePicker = date => {\r\n        let myDate = null\r\n        if (date !== null) {\r\n            if (date.toString() !== \"Invalid Date\") {\r\n                myDate = format(date, 'yyyy-MM-dd')\r\n            }\r\n        }\r\n        changeSelectedHasseibi({\r\n            variables: {\r\n                'date': myDate\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedHasseibi] = useMutation(CHANGE_HASSEIBI)\r\n\r\n    // ローカルステート取得\r\n    const { loading, error, data } = useQuery(GET_HASSEIBI)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedHasseibi\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                    margin=\"normal\"\r\n                    id=\"hasseibi-date-picker-dialog\"\r\n                    label=\"発生日\"\r\n                    format=\"yyyy-MM-dd\"\r\n                    locale={ja} \r\n                    value={selectedValue}\r\n                    onChange={doChangeDateTimePicker}\r\n                    KeyboardButtonProps={{\r\n                        'aria-label': 'change date',\r\n                    }}\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI＆日付関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport ja from 'date-fns/locale/ja'\r\nimport format from 'date-fns/format'\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { FormControl } from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_FURIKAEBI = gql`\r\n    mutation changeSelectedFurikaebi($date: String!) {\r\n        changeSelectedFurikaebi(date: $date) @client\r\n    }\r\n`\r\n\r\n// データ取得クエリ\r\nconst GET_FURIKAEBI = gql`\r\n    query {\r\n        selectedFurikaebi @client\r\n    }\r\n`\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n\r\nexport default function Furikaebi() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // DateTimePicker変更時\r\n    const doChangeDateTimePicker = date => {\r\n        let myDate = null\r\n        if (date !== null) {\r\n            if (date.toString() !== \"Invalid Date\") {\r\n                myDate = format(date, 'yyyy-MM-dd')\r\n            }\r\n        }\r\n        changeSelectedFurikaebi({\r\n            variables: {\r\n                'date': myDate\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedFurikaebi] = useMutation(CHANGE_FURIKAEBI)\r\n\r\n    // ローカルステート取得\r\n    const { loading, error, data } = useQuery(GET_FURIKAEBI)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedFurikaebi\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                    margin=\"normal\"\r\n                    id=\"firukaebi-date-picker-dialog\"\r\n                    label=\"振替日\"\r\n                    format=\"yyyy-MM-dd\"\r\n                    locale={ja} \r\n                    value={selectedValue}\r\n                    onChange={doChangeDateTimePicker}\r\n                    KeyboardButtonProps={{\r\n                        'aria-label': 'change date',\r\n                    }}\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {\r\n    FormControl,\r\n    TextField,\r\n} from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n// データ取得クエリ\r\nconst GET_NISSU = gql`\r\n    query {\r\n        selectedNissu @client\r\n    }\r\n`\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_NISSU = gql`\r\n    mutation changeSelectedNissu($value: Int!) {\r\n        changeSelectedNissu(value: $value) @client\r\n    }\r\n`\r\n\r\nexport default function Nissu() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // コンボボックス変更時\r\n    const doChangeTextField = (e) => {\r\n        changeSelectedNissu({\r\n            variables: {\r\n                'value': e.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedNissu] = useMutation(CHANGE_NISSU)\r\n\r\n    // ローカルステート＆データ全件取得\r\n    const { loading, error, data } = useQuery(GET_NISSU)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedNissu\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <TextField\r\n                id=\"my-number\"\r\n                label=\"日数\"\r\n                type=\"number\"\r\n                value={selectedValue}\r\n                onChange={e => doChangeTextField(e)}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n// データ取得クエリ\r\nconst GET_TOKUNO_OPTION = gql`\r\n    query getData($id: String) {\r\n        selectedTokunoOption @client\r\n        tokuno_option(id: $id) {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_TOKUNO_OPTION = gql`\r\n    mutation changeSelectedTokunoOption($id: String!) {\r\n        changeSelectedTokunoOption(id: $id) @client\r\n    }\r\n`\r\n\r\nexport default function TokunoOption() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // コンボボックス変更時\r\n    const doChangeSelect = (e) => {\r\n        changeSelectedTokunoOption({\r\n            variables: {\r\n                'id': e.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedTokunoOption] = useMutation(CHANGE_TOKUNO_OPTION)\r\n\r\n    // ローカルステート＆データ全件取得\r\n    const { loading, error, data } = useQuery(GET_TOKUNO_OPTION)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedTokunoOption\r\n    const datas = data.tokuno_option\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <InputLabel id=\"my-label\">得意先</InputLabel>\r\n            <Select\r\n                labelId=\"my-label\"\r\n                id=\"my-select\"\r\n                value={selectedValue}\r\n                onChange={e => doChangeSelect(e)}\r\n            >\r\n            <MenuItem key=\"\" value=\"\">未選択</MenuItem>\r\n            {datas.map(repo => (\r\n                <MenuItem key={repo.id} value={repo.id}>{repo.id} - {repo.name}</MenuItem>\r\n            ))}\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n// データ取得クエリ\r\nconst GET_HAITANTO = gql`\r\n    query getData($id: String) {\r\n        selectedHaitanto @client\r\n        haitanto(id: $id) {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_HAITANTO = gql`\r\n    mutation changeSelectedHaitanto($id: String!) {\r\n        changeSelectedHaitanto(id: $id) @client\r\n    }\r\n`\r\n\r\nexport default function Haitanto() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // コンボボックス変更時\r\n    const doChangeSelect = (e) => {\r\n        changeSelectedHaitanto({\r\n            variables: {\r\n                'id': e.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedHaitanto] = useMutation(CHANGE_HAITANTO)\r\n\r\n    // ローカルステート＆データ全件取得\r\n    const { loading, error, data } = useQuery(GET_HAITANTO)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedHaitanto\r\n    const datas = data.haitanto\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <InputLabel id=\"my-label\">配担当</InputLabel>\r\n            <Select\r\n                labelId=\"my-label\"\r\n                id=\"my-select\"\r\n                value={selectedValue}\r\n                onChange={e => doChangeSelect(e)}\r\n            >\r\n            <MenuItem key=\"\" value=\"\">未選択</MenuItem>\r\n            {datas.map(repo => (\r\n                <MenuItem key={repo.id} value={repo.id}>{repo.id} - {repo.name}</MenuItem>\r\n            ))}\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI＆日付関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport ja from 'date-fns/locale/ja'\r\nimport format from 'date-fns/format'\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { FormControl } from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_SHUKKOBI = gql`\r\n    mutation changeSelectedShukkobi($date: String!) {\r\n        changeSelectedShukkobi(date: $date) @client\r\n    }\r\n`\r\n\r\n// データ取得クエリ\r\nconst GET_SHUKKOBI = gql`\r\n    query {\r\n        selectedShukkobi @client\r\n    }\r\n`\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n\r\nexport default function Shukkobi() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // DateTimePicker変更時\r\n    const doChangeDateTimePicker = date => {\r\n        let myDate = null\r\n        if (date !== null) {\r\n            if (date.toString() !== \"Invalid Date\") {\r\n                myDate = format(date, 'yyyy-MM-dd')\r\n            }\r\n        }\r\n        changeSelectedShukkobi({\r\n            variables: {\r\n                'date': myDate\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedShukkobi] = useMutation(CHANGE_SHUKKOBI)\r\n\r\n    // ローカルステート取得\r\n    const { loading, error, data } = useQuery(GET_SHUKKOBI)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedShukkobi\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                    margin=\"normal\"\r\n                    id=\"shukkobi-date-picker-dialog\"\r\n                    label=\"出庫日\"\r\n                    format=\"yyyy-MM-dd\"\r\n                    locale={ja} \r\n                    value={selectedValue}\r\n                    onChange={doChangeDateTimePicker}\r\n                    KeyboardButtonProps={{\r\n                        'aria-label': 'change date',\r\n                    }}\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI＆日付関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport ja from 'date-fns/locale/ja'\r\nimport format from 'date-fns/format'\r\nimport {\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport { FormControl } from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_MEIHENBI = gql`\r\n    mutation changeSelectedMeihenbi($date: String!) {\r\n        changeSelectedMeihenbi(date: $date) @client\r\n    }\r\n`\r\n\r\n// データ取得クエリ\r\nconst GET_MEIHENBI = gql`\r\n    query {\r\n        selectedMeihenbi @client\r\n    }\r\n`\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n\r\nexport default function Meihenbi() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // DateTimePicker変更時\r\n    const doChangeDateTimePicker = date => {\r\n        let myDate = null\r\n        if (date !== null) {\r\n            if (date.toString() !== \"Invalid Date\") {\r\n                myDate = format(date, 'yyyy-MM-dd')\r\n            }\r\n        }\r\n        changeSelectedMeihenbi({\r\n            variables: {\r\n                'date': myDate\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedMeihenbi] = useMutation(CHANGE_MEIHENBI)\r\n\r\n    // ローカルステート取得\r\n    const { loading, error, data } = useQuery(GET_MEIHENBI)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedMeihenbi\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                    margin=\"normal\"\r\n                    id=\"meihenbi-date-picker-dialog\"\r\n                    label=\"名変日\"\r\n                    format=\"yyyy-MM-dd\"\r\n                    locale={ja} \r\n                    value={selectedValue}\r\n                    onChange={doChangeDateTimePicker}\r\n                    KeyboardButtonProps={{\r\n                        'aria-label': 'change date',\r\n                    }}\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n// データ取得クエリ\r\nconst GET_TOKUNO = gql`\r\n    query getData($id: String) {\r\n        selectedTokuno @client\r\n        tokuno(id: $id) {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_TOKUNO = gql`\r\n    mutation changeSelectedTokuno($id: String!) {\r\n        changeSelectedTokuno(id: $id) @client\r\n    }\r\n`\r\n\r\nexport default function Tokuno() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // コンボボックス変更時\r\n    const doChangeSelect = (e) => {\r\n        changeSelectedTokuno({\r\n            variables: {\r\n                'id': e.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedTokuno] = useMutation(CHANGE_TOKUNO)\r\n\r\n    // ローカルステート＆データ全件取得\r\n    const { loading, error, data } = useQuery(GET_TOKUNO)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedTokuno\r\n    const datas = data.tokuno\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <InputLabel id=\"my-label\">得意先</InputLabel>\r\n            <Select\r\n                labelId=\"my-label\"\r\n                id=\"my-select\"\r\n                value={selectedValue}\r\n                onChange={e => doChangeSelect(e)}\r\n            >\r\n            <MenuItem key=\"\" value=\"\">未選択</MenuItem>\r\n            {datas.map(repo => (\r\n                <MenuItem key={repo.id} value={repo.id}>{repo.id} - {repo.name}</MenuItem>\r\n            ))}\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport {\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from '@material-ui/core'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery, useMutation } from 'react-apollo-hooks'\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '90%',\r\n    },\r\n});\r\n\r\n// データ取得クエリ\r\nconst GET_ZEIKU = gql`\r\n    query getData($id: String) {\r\n        selectedZeiku @client\r\n        zeiku(id: $id) {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\n// ローカルステートを更新するmutation\r\nconst CHANGE_ZEIKU = gql`\r\n    mutation changeSelectedZeiku($id: String!) {\r\n        changeSelectedZeiku(id: $id) @client\r\n    }\r\n`\r\n\r\nexport default function Zeiku() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // コンボボックス変更時\r\n    const doChangeSelect = (e) => {\r\n        changeSelectedZeiku({\r\n            variables: {\r\n                'id': e.target.value\r\n            }\r\n        })\r\n    }\r\n\r\n    // useMutaion\r\n    const [changeSelectedZeiku] = useMutation(CHANGE_ZEIKU)\r\n\r\n    // ローカルステート＆データ全件取得\r\n    const { loading, error, data } = useQuery(GET_ZEIKU)\r\n    \r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n    \r\n    const selectedValue = data.selectedZeiku\r\n    const datas = data.zeiku\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <InputLabel id=\"my-label\">税区分</InputLabel>\r\n            <Select\r\n                labelId=\"my-label\"\r\n                id=\"my-select\"\r\n                value={selectedValue}\r\n                onChange={e => doChangeSelect(e)}\r\n            >\r\n            <MenuItem key=\"\" value=\"\">未選択</MenuItem>\r\n            {datas.map(repo => (\r\n                <MenuItem key={repo.id} value={repo.id}>{repo.id} - {repo.name}</MenuItem>\r\n            ))}\r\n            </Select>\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI関連のimport\r\nimport { Button } from '@material-ui/core/'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery } from 'react-apollo-hooks'\r\n\r\n\r\n// ローカルステートを取得するクエリ\r\nconst GET_LOCAL_STATE = gql`\r\n    query {\r\n        selectedBusho @client\r\n        selectedTanto @client\r\n        selectedBaibai @client\r\n        selectedAzukari @client\r\n        selectedHenpin @client\r\n        selectedShoribi @client\r\n        selectedHasseibi @client\r\n        selectedFurikaebi @client\r\n        selectedNissu @client\r\n        selectedShukkobi @client\r\n        selectedMeihenbi @client\r\n        selectedTokunoOption @client\r\n        selectedHaitanto @client\r\n        selectedTokuno @client\r\n        selectedZeiku @client\r\n    }\r\n`\r\n\r\nexport default function SubmitButton() {\r\n\r\n    // ボタンクリック時\r\n    const doClickButton = () => {\r\n        const msg = \r\n        \"部署: \" + data.selectedBusho + \"\\n\" +\r\n        \"担当: \" + data.selectedTanto + \"\\n\" +\r\n        \"売買区分: \" + data.selectedBaibai + \"\\n\" +\r\n        \"預り区分: \" + data.selectedAzukari + \"\\n\" +\r\n        \"返品区分: \" + data.selectedHenpin + \"\\n\" +\r\n        \"処理日: \" + data.selectedShoribi + \"\\n\" +\r\n        \"発生日: \" + data.selectedHasseibi + \"\\n\" +\r\n        \"振替日: \" + data.selectedFurikaebi + \"\\n\" +\r\n        \"日数: \" + data.selectedNissu + \"\\n\" +\r\n        \"得意先区分: \" + data.selectedTokunoOption + \"\\n\" +\r\n        \"配担当: \" + data.selectedHaitanto + \"\\n\" +\r\n        \"出庫日: \" + data.selectedShukkobi + \"\\n\" +\r\n        \"名変日: \" + data.selectedMeihenbi + \"\\n\" +\r\n        \"得意先: \" + data.selectedTokuno + \"\\n\" +\r\n        \"税区分: \" + data.selectedZeiku + \"\\n\"\r\n        alert(msg)\r\n    }\r\n\r\n    // ローカルステート取得\r\n    const { data } = useQuery(GET_LOCAL_STATE)\r\n\r\n    return (\r\n        <Button variant=\"contained\" color=\"primary\" onClick={e => doClickButton()}>処理</Button>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// Material-UI関連のimport\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { FormControl } from '@material-ui/core'\r\nimport MUIDataTable from 'mui-datatables'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { useQuery } from 'react-apollo-hooks'\r\n\r\n// Material-UIのスタイル設定\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        margin: '10px',\r\n        minWidth: '98%',\r\n    },\r\n});\r\n\r\n// データ取得クエリ\r\nconst GET_MEISAI = gql`\r\n    query getData($id: String) {\r\n        meisai(id: $id) {\r\n            id\r\n            hinmei\r\n            size\r\n\t\t    yoryo\r\n            irisu\r\n            maisu\r\n            tanka\r\n            kingaku\r\n            gensan\r\n            genkako\r\n            ikusei\r\n        }\r\n    }\r\n`\r\n\r\nexport default function Meisai() {\r\n\r\n    const classes = useStyles();\r\n\r\n    // 列定義\r\n    const columns = [\r\n        {\r\n            name: 'hinmei', label: '品名', \r\n            options: {\r\n                sort: true, \r\n                filter: true,\r\n            }, \r\n        }, \r\n        {\r\n            name: 'size', label: 'サイズ', \r\n            options: {\r\n                sort: true, \r\n                filter: true,\r\n            }, \r\n        }, \r\n        {\r\n            name: 'yoryo', label: '容量', \r\n            options: {\r\n                sort: true, \r\n                filter: true,\r\n            }, \r\n        }, \r\n        {\r\n            name: 'irisu', label: '入数', \r\n            options: {\r\n                sort: true, \r\n                filter: true,\r\n            }, \r\n        }, \r\n        {\r\n            name: 'maisu', label: '枚数', \r\n            options: {\r\n                sort: true, \r\n                filter: true,\r\n            }, \r\n        }, \r\n        {\r\n            name: 'tanka', label: '単価', \r\n            options: {\r\n                sort: true, \r\n                filter: true,\r\n            }, \r\n        }, \r\n        {\r\n            name: 'kingaku', label: '金額', \r\n            options: {\r\n                sort: true, \r\n                filter: true,\r\n            }, \r\n        }, \r\n        {\r\n            name: 'gensan', label: '原産地・原料原産地', \r\n            options: {\r\n                sort: true, \r\n                filter: true,\r\n            }, \r\n        }, \r\n        {\r\n            name: 'genkako', label: '加工地・原産国名', \r\n            options: {\r\n                sort: true, \r\n                filter: true,\r\n            }, \r\n        }, \r\n        {\r\n            name: 'ikusei', label: '育成', \r\n            options: {\r\n                sort: true, \r\n                filter: true,\r\n            }, \r\n        }, \r\n    ];\r\n       \r\n    // データ全件取得\r\n    const { loading, error, data } = useQuery(GET_MEISAI)\r\n\r\n    // 通信状態に応じたコンポーネントを表示\r\n    if (loading) return <p>Loading...</p>\r\n    if (error)   return <p>Error: {error}</p>\r\n\r\n    const datas = data.meisai\r\n\r\n    return (\r\n        <FormControl className={classes.root}>\r\n            <MUIDataTable\r\n                data={datas}\r\n                columns={columns}\r\n            />\r\n        </FormControl>\r\n    )\r\n\r\n}\r\n","import React from 'react'\r\n\r\n// コンポ―ネントのimport\r\nimport Busho from './components/Busho'\r\nimport Tanto from './components/Tanto'\r\nimport Baibai from './components/Baibai'\r\nimport Azukari from './components/Azukari'\r\nimport Henpin from './components/Henpin'\r\nimport Shoribi from './components/Shoribi'\r\nimport Hasseibi from './components/Hasseibi'\r\nimport Furikaebi from './components/Furikaebi'\r\nimport Nissu from './components/Nissu'\r\nimport TokunoOption from './components/TokunoOption'\r\nimport Haitanto from './components/Haitanto'\r\nimport Shukkobi from './components/Shukkobi'\r\nimport Meihenbi from './components/Meihenbi'\r\nimport Tokuno from './components/Tokuno'\r\nimport Zeiku from './components/Zeiku'\r\nimport SubmitButton from './components/SubmitButton'\r\nimport Meisai from './components/Meisai'\r\n\r\n// Material-UI関連のimport\r\nimport {\r\n  createMuiTheme, \r\n  MuiThemeProvider, \r\n  CssBaseline, \r\n  Grid,\r\n  Typography,\r\n} from '@material-ui/core'\r\nimport { blue } from '@material-ui/core/colors'\r\n\r\n// GraphQL関連のimport\r\nimport gql from 'graphql-tag'\r\n\r\n// Apollo-Client関連のimport\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { HttpLink } from 'apollo-link-http'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { ApolloProvider } from 'react-apollo-hooks'\r\n\r\n\r\nexport default function App() {\r\n\r\n  // キャッシュ\r\n  const cache = new InMemoryCache()\r\n\r\n  // GraphQLのエンドポイント\r\n  const httpLink = new HttpLink({\r\n    // uri: 'http://localhost:5000/graphql',\r\n    uri: 'https://now-apollo-deploy.aki323buri2.now.sh/graphql',\r\n  })\r\n\r\n  // Apollo-Clientの設定\r\n  const client = new ApolloClient({\r\n    link: httpLink,\r\n    cache,\r\n    resolvers: {\r\n       Mutation: {\r\n        changeSelectedBusho: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedBusho}`,\r\n            data: {selectedBusho: variables.id},\r\n          });\r\n        },\r\n        changeSelectedTanto: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedTanto}`,\r\n            data: {selectedTanto: variables.id},\r\n          });\r\n        },\r\n        changeSelectedBaibai: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedBaibai}`,\r\n            data: {selectedBaibai: variables.id},\r\n          });\r\n        },\r\n        changeSelectedAzukari: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedAzukari}`,\r\n            data: {selectedAzukari: variables.id},\r\n          });\r\n        },\r\n        changeSelectedHenpin: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedHenpin}`,\r\n            data: {selectedHenpin: variables.id},\r\n          });\r\n        },\r\n        changeSelectedShoribi: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedShoribi}`,\r\n            data: {selectedShoribi: variables.date},\r\n          });\r\n        },\r\n        changeSelectedHasseibi: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedHasseibi}`,\r\n            data: {selectedHasseibi: variables.date},\r\n          });\r\n        },\r\n        changeSelectedFurikaebi: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedFurikaebi}`,\r\n            data: {selectedFurikaebi: variables.date},\r\n          });\r\n        },\r\n        changeSelectedNissu: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedNissu}`,\r\n            data: {selectedNissu: variables.value},\r\n          });\r\n        },\r\n        changeSelectedTokunoOption: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedTokunoOption}`,\r\n            data: {selectedTokunoOption: variables.id},\r\n          });\r\n        },\r\n        changeSelectedHaitanto: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedHaitanto}`,\r\n            data: {selectedHaitanto: variables.id},\r\n          });\r\n        },\r\n        changeSelectedShukkobi: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedShukkobi}`,\r\n            data: {selectedShukkobi: variables.date},\r\n          });\r\n        },\r\n        changeSelectedMeihenbi: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedMeihenbi}`,\r\n            data: {selectedMeihenbi: variables.date},\r\n          });\r\n        },\r\n        changeSelectedTokuno: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedTokuno}`,\r\n            data: {selectedTokuno: variables.id},\r\n          });\r\n        },\r\n        changeSelectedZeiku: (_root, variables, { cache }) => {\r\n          cache.writeQuery({\r\n            query: gql`{selectedZeiku}`,\r\n            data: {selectedZeiku: variables.id},\r\n          });\r\n        },\r\n      },\r\n    }\r\n  })\r\n\r\n  // ローカルステートの初期化\r\n  // DateTimePickerを空にする場合はnullを指定\r\n  cache.writeQuery({\r\n    query: gql`{\r\n      selectedBusho\r\n      selectedTanto\r\n      selectedBaibai\r\n      selectedAzukari\r\n      selectedHenpin\r\n      selectedShoribi\r\n      selectedHasseibi\r\n      selectedFurikaebi\r\n      selectedNissu\r\n      selectedTokunoOption\r\n      selectedHaitanto\r\n      selectedShukkobi\r\n      selectedMeihenbi\r\n      selectedTokuno\r\n      selectedZeiku\r\n    }`,\r\n    data: {\r\n      selectedBusho: '',\r\n      selectedTanto: '',\r\n      selectedBaibai: '0',\r\n      selectedAzukari: '0',\r\n      selectedHenpin: '0',\r\n      selectedShoribi: null,\r\n      selectedHasseibi: null,\r\n      selectedFurikaebi: null,\r\n      selectedNissu: 0,\r\n      selectedTokunoOption: '',\r\n      selectedHaitanto: '',\r\n      selectedShukkobi: null,\r\n      selectedMeihenbi: null,\r\n      selectedTokuno: '', \r\n      selectedZeiku: '',\r\n    },\r\n  });\r\n  console.log(cache.data)\r\n\r\n  // Material-UIのテーマ設定\r\n  // primaryカラーの設定\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      primary: {\r\n        main: blue[700]\r\n      }\r\n    }, \r\n  })\r\n\r\n  // コンポ―ネントをApolloProviderでラップする\r\n  // <CssBaseline />を追加することで、ブラウザが違っても表示を統一させることができます\r\n  // また、ページのマージンがなくなり、背景色がtheme.palette.background.defaultで指定した色(デフォルトだと薄いグレー)になります\r\n  // Material-UIのコンポーネントで囲まれていない文字列を<Typography />で囲う\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <MuiThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h4\">\r\n              売上伝票　入力（枚数）\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={3}><Busho /></Grid>\r\n          <Grid item xs={3}><Tanto /></Grid>\r\n          <Grid item xs={2}><Baibai /></Grid>\r\n          <Grid item xs={2}><Azukari /></Grid>\r\n          <Grid item xs={2}><Henpin /></Grid>\r\n        </Grid>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={3}><Shoribi /></Grid>\r\n          <Grid item xs={3}></Grid>\r\n          <Grid item xs={2}><Hasseibi /></Grid>\r\n          <Grid item xs={2}><Furikaebi /></Grid>\r\n          <Grid item xs={2}><Nissu /></Grid>\r\n        </Grid>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={3}><TokunoOption /></Grid>\r\n          <Grid item xs={3}><Haitanto /></Grid>\r\n          <Grid item xs={2}><Shukkobi /></Grid>\r\n          <Grid item xs={2}><Meihenbi /></Grid>\r\n        </Grid>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={6}><Tokuno /></Grid>\r\n          <Grid item xs={2}><Zeiku /></Grid>\r\n          <Grid item xs={2}></Grid>\r\n          <Grid item xs={2}><SubmitButton /></Grid>\r\n        </Grid>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}><Meisai /></Grid>\r\n        </Grid>\r\n      </MuiThemeProvider>\r\n    </ApolloProvider>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// <React.StrictMode>は、今までの書き方で問題が出る部分をあぶり出すためのモード\r\n// React本体のproductionビルドではチェックが無効となるので、developmentビルドを使う必要がある\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}